# BASH CONFIGURATIONS MANAGEMENT
# ============================================================================ #
# shellcheck shell=bash

# Deactivate any virtualenv so we are not adding
if [[ $(command -v deactivate) == deactivate ]]; then
  activate_command="$(command -v activate)"
  echo "Leaving python venv"
  deactivate
else
  activate_command=""
fi

# Load library of bash functions
[[ -f ~/.bash_functions ]] && source ~/.bash_functions
# Avoid multiple times sourcing the file, for updates source this file manually
export MY_PROFILE_SOURCED=true
# echo "Sourcing ~/.my_bash_profile"


# BASHRC ADDITIONS
# ---------------------------------------------------------------------------- #
# Since .bashrc is typically managed and preset by the OS we don't want to
# overwrite it completely, instead we want to append a source to this file
add_line_to_file ~/.bashrc \
  "[[ \$MY_PROFILE_SOURCED != true && -f ~/.my_bash_profile ]] && source ~/.my_bash_profile"


# BASH SOURCE BASHRC
# ---------------------------------------------------------------------------- #
# Source bashrc to avoid funky errors when it doesn't get included
[[ -f ~/.bashrc ]] && source ~/.bashrc


# (BOURNE) SHELL OPTIONS #
# ---------------------------------------------------------------------------- #
# Prevent file overwrite on stdout redirection
# Use `>|` to force redirection to an existing file
set -o noclobber
# Prevent Ctrl+d to close shell for the first 10 times
export IGNOREEOF=10

# BASH SHELL OPTIONS #
# ---------------------------------------------------------------------------- #
# Prepend cd to directory names automatically
shopt -s autocd
# Define a variable containing a path and you will be able to cd into it
# This allows you to bookmark your favorite places across the file system
shopt -s cdable_vars
# Autocorrect minor spelling mistakes when cd'ing
shopt -s cdspell
# Save multi-line commands as one command
shopt -s cmdhist
# Autocorrect minor spelling mistakes for file name completion
shopt -s dirspell
# Extended pattern matching
shopt -s extglob
# Pattern matching no files result in an expansion error
# Currently bugged with tab completion:  shopt -s failglob
# Recursive globbing (enables ** to recurse all directories)
shopt -s globstar
# Append to the history file, don't overwrite it
shopt -s histappend
# Save multi-line commands with newlines instead of semicolons
shopt -s lithist


# OTHER BASH SETTINGS #
# ---------------------------------------------------------------------------- #
# Automatically trim long paths in the prompt
PROMPT_DIRTRIM=2
# Enable history expansion with space
# E.g. typing !!<space> will replace the !! with your last command
bind Space:magic-space


# HISTORY SETTINGS #
# ---------------------------------------------------------------------------- #
# Unsetting history file size, makes them arbitrarily large
export HISTSIZE=
export HISTFILESIZE=
# Change the file location because certain bash sessions truncate .bash_history file upon close.
# http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login
export HISTFILE=~/.bash_eternal_history
# Use standard ISO 8601 timestamp
# %F equivalent to %Y-%m-%d
# %T equivalent to %H:%M:%S (24-hours format)
export HISTTIMEFORMAT='%F %T '
# Avoid duplicates
export HISTCONTROL=ignoredups:erasedups:ignorespace
# Don't record some commands
export HISTIGNORE="&:[ ]*:exit:ls:bg:fg:history:clear"
# Save and reload the history after each command finishes
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"
# Enable incremental history search with up/down arrows (also Readline goodness)
# Learn more about this here:
# http://codeinthehole.com/writing/the-most-important-command-line-tip-incremental-history-searching-with-inputrc/
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'
bind '"\e[C": forward-char'
bind '"\e[D": backward-char'


# SMARTER TAB COMPLETION #
# ---------------------------------------------------------------------------- #
# Perform file completion in a case insensitive fashion
bind "set completion-ignore-case on"
# Treat hyphens and underscores as equivalent
bind "set completion-map-case on"
# Display matches for ambiguous patterns at first tab press
bind "set show-all-if-ambiguous on"
# Immediately add a trailing slash when autocompleting symlinks to directories
bind "set mark-symlinked-directories on"
# Allow 'Pg Dn', 'Pg Up' and 'Alt'+n'Pg Dn' to navigate tab complete results
bind '"\e[6~": menu-complete'
bind '"\e[5~": menu-complete-backward'


# MISC SETTINGS #
# ---------------------------------------------------------------------------- #
# Export local binary paths
export PATH="$HOME/bin:$HOME/.local/bin:$PATH"
# Enable ipdb debugger for Python 3.7.x 'breakpoint()'
export PYTHONBREAKPOINT=ipdb.set_trace

# This defines where cd looks for targets
# Add the directories you want to have fast access to, separated by colon
# Ex: CDPATH=".:~:~/projects" will look for targets in the current working directory, in home and in the ~/projects folder
# CDPATH="."

# Examples of cdable_vars:
# export dotfiles="$HOME/dotfiles"
# export projects="$HOME/projects"
# export documents="$HOME/Documents"


# HSTR CONFIGURATION
# ---------------------------------------------------------------------------- #
alias hh=hstr                    # hh to be alias for hstr
export HSTR_CONFIG=hicolor       # get more colors
# if this is interactive shell, then bind hstr to Ctrl-r (for Vi mode check doc)
if [[ $- =~ .*i.* ]]; then bind '"\C-r": "\C-a hstr -- \C-j"'; fi
# if this is interactive shell, then bind 'kill last command' to Ctrl-x k
if [[ $- =~ .*i.* ]]; then bind '"\C-xk": "\C-a hstr -k \C-j"'; fi

# PYENV CONFIG
# ---------------------------------------------------------------------------- #
export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"


# POWERLINE SETUP
# ---------------------------------------------------------------------------- #
# For loop to make the setup independent of python version used for install
for f in ~/.local/lib/python*/site-packages/powerline/bindings/bash/powerline.sh; do
  if [ -f "$f" ]; then
    echo "Starting powerline"
    powerline-daemon -q
    export POWERLINE_BASH_CONTINUATION=1
    export POWERLINE_BASH_SELECT=1
    . "$f"
    break
  fi
done


# FUCK SETUP
# ---------------------------------------------------------------------------- #
eval "$(thefuck --alias)"


# BASH SOURCE EXTERNAL FILES
# ---------------------------------------------------------------------------- #
# Source bash_alias file
if [ -f ~/.bash_aliases ]; then
  . ~/.bash_aliases
fi
# Source different environment configurations stored in ~/.env/ as *.env files
for env_file in ~/.env/*.env; do
  if [ -f "$env_file" ]; then
    echo "Sourcing environment file: $env_file"
    . "$env_file"
  fi
done


# Re-activate virtualenv in case it was activated (Keep this at the end of the file)
[[ -n $activate_command ]] && source "$activate_command"
