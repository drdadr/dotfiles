# BASH CONFIGURATIONS MANAGEMENT
# ============================================================================ #
# shellcheck shell=bash

# Deactivate any virtualenv so we are not adding
if [[ $(command -v deactivate) == deactivate ]]; then
  activate_command="$(command -v activate)"
  echo "Leaving python venv"
  deactivate
else
  activate_command=""
fi

# Source bashrc (if this is not already sourced by bashrc)
export SOURCE_LOCK=1
source ~/.bashrc
unset SOURCE_LOCK

# Load library of bash functions
[[ -f ~/.bash_functions ]] && source ~/.bash_functions

# (BOURNE) SHELL OPTIONS #
# ---------------------------------------------------------------------------- #
# Prevent file overwrite on stdout redirection
# Use `>|` to force redirection to an existing file
set -o noclobber
# Prevent Ctrl+d to close shell for the first 10 times
export IGNOREEOF=10

# BASH SHELL OPTIONS #
# ---------------------------------------------------------------------------- #
# Prepend cd to directory names automatically
shopt -s autocd
# Define a variable containing a path and you will be able to cd into it
# This allows you to bookmark your favorite places across the file system
shopt -s cdable_vars
# Autocorrect minor spelling mistakes when cd'ing
shopt -s cdspell
# Save multi-line commands as one command
shopt -s cmdhist
# Save multi-line commands with newlines instead of semicolons
# shopt -s lithist
# Autocorrect minor spelling mistakes for file name completion
shopt -s dirspell
# Extended pattern matching
shopt -s extglob
# Pattern matching no files result in an expansion error
# Currently bugged with tab completion:  shopt -s failglob
# Recursive globbing (enables ** to recurse all directories)
shopt -s globstar

# OTHER BASH SETTINGS #
# ---------------------------------------------------------------------------- #
# Automatically trim long paths in the prompt
PROMPT_DIRTRIM=2
# Enable history expansion with space
# E.g. typing !!<space> will replace the !! with your last command
bind Space:magic-space


# SMARTER TAB COMPLETION #
# ---------------------------------------------------------------------------- #
# Perform file completion in a case insensitive fashion
bind "set completion-ignore-case on"
# Treat hyphens and underscores as equivalent
bind "set completion-map-case on"
# Display matches for ambiguous patterns at first tab press
bind "set show-all-if-ambiguous on"
# Immediately add a trailing slash when autocompleting symlinks to directories
bind "set mark-symlinked-directories on"
# Allow 'Pg Dn', 'Pg Up' and 'Alt'+n'Pg Dn' to navigate tab complete results
bind '"\e[6~": menu-complete'
bind '"\e[5~": menu-complete-backward'


# MISC SETTINGS #
# ---------------------------------------------------------------------------- #
# Export local binary paths
export PATH="$HOME/bin:$HOME/.local/bin:$PATH"

# This defines where cd looks for targets
# Add the directories you want to have fast access to, separated by colon
# Ex: CDPATH=".:~:~/projects" will look for targets in the current working directory, in home and in the ~/projects folder
# CDPATH="."

# cdable_vars:
export dotfiles="$HOME/dotfiles"
export repos="$HOME/repos"
export documents="$HOME/Documents"
export zd2="$HOME/repos/zhm3d-dev2"

# BASH SOURCE EXTERNAL FILES
# ---------------------------------------------------------------------------- #
# Source different environment configurations stored in ~/.env/ as *.env files
for env_file in ~/.env/*.env; do
  if [ -f "$env_file" ]; then
    echo "Sourcing environment file: $env_file"
    . "$env_file"
  fi
done


# POWERLINE SETUP
# ---------------------------------------------------------------------------- #
# Expects powerline to be installed using pipx!
if command -v powerline &> /dev/null; then
  POWERLINE_ROOT="$(pipx runpip powerline-status show powerline-status | grep Location: | awk '{print $2}')"
  export POWERLINE_ROOT
  powerline-daemon -q
  export POWERLINE_BASH_CONTINUATION=1
  export POWERLINE_BASH_SELECT=1
  source "$POWERLINE_ROOT/powerline/bindings/bash/powerline.sh"
fi


# FUCK SETUP
# ---------------------------------------------------------------------------- #
command -v thefuck >/dev/null && eval "$(thefuck --alias)"


# Re-activate virtualenv in case it was activated (Keep this at the end of the file)
[[ -n $activate_command ]] && source "$activate_command"

echo "Finished sourcing my bashrc"
